.TH "Backend" 3 "Sun Nov 23 2014" "Version 0.4.0" "VetoLC" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Backend \- 
.PP
The \fBBackend\fP class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Backend\&.hpp>\fP
.PP
Inherits QObject\&.
.SS "Public Slots"

.in +1c
.ti -1c
.RI "void \fBsettingsWindowRequested\fP (\fBIInstance\fP *)"
.br
.RI "\fI\fBBackend::settingsWindowRequested\fP\&. \fP"
.ti -1c
.RI "void \fBopenHelp\fP (\fBIInstance\fP *)"
.br
.RI "\fI\fBBackend::openHelp\fP\&. \fP"
.ti -1c
.RI "void \fBinstanceClosing\fP (\fBIInstance\fP *)"
.br
.RI "\fI\fBBackend::instanceClosing\fP\&. \fP"
.ti -1c
.RI "void \fBinstanceDestroyed\fP (QObject *)"
.br
.RI "\fI\fBBackend::instanceDestroyed\fP\&. \fP"
.ti -1c
.RI "void \fBinstanceRunCode\fP (\fBIInstance\fP *)"
.br
.RI "\fI\fBBackend::instanceRunCode\fP\&. \fP"
.ti -1c
.RI "void \fBinstanceStopCode\fP (\fBIInstance\fP *)"
.br
.RI "\fI\fBBackend::instanceStopCode\fP\&. \fP"
.ti -1c
.RI "void \fBinstanceChangedSetting\fP (\fBIInstance\fP *, const QString &key, const QVariant &value)"
.br
.RI "\fI\fBBackend::instanceChangedSetting\fP\&. \fP"
.ti -1c
.RI "void \fBinstanceRequestSetting\fP (\fBIInstance\fP *, const QString &key, QVariant &value)"
.br
.RI "\fI\fBBackend::instanceRequestSetting\fP\&. \fP"
.ti -1c
.RI "void \fBinstanceChangedSettings\fP (\fBIInstance\fP *, const QHash< QString, QVariant > &)"
.br
.RI "\fI\fBBackend::instanceChangedSettings\fP\&. \fP"
.ti -1c
.RI "void \fBinstanceRequestSettings\fP (\fBIInstance\fP *, QHash< QString, QVariant > &)"
.br
.RI "\fI\fBBackend::instanceRequestSettings\fP\&. \fP"
.ti -1c
.RI "void \fBchildSaidCloseAll\fP ()"
.br
.RI "\fI\fBBackend::childSaidCloseAll\fP\&. \fP"
.ti -1c
.RI "void \fBgetExecutionResults\fP (\fBQtSoundThread\fP *, QString)"
.br
.RI "\fI\fBBackend::getExecutionResults\fP\&. \fP"
.ti -1c
.RI "void \fBgetExecutionResults\fP (\fBPySoundThread\fP *, QString, int)"
.br
.ti -1c
.RI "void \fBgetExecutionResults\fP (\fBPyLiveThread\fP *, QString, int)"
.br
.ti -1c
.RI "void \fBgetExecutionResults\fP (\fBGlLiveThread\fP *, QString)"
.br
.ti -1c
.RI "void \fBgetError\fP (\fBGlLiveThread\fP *, QString, int)"
.br
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBwarningSignal\fP (QWidget *, QString)"
.br
.ti -1c
.RI "void \fBcloseAction\fP ()"
.br
.ti -1c
.RI "void \fBsaveAction\fP ()"
.br
.ti -1c
.RI "void \fBshowResults\fP (const QString &)"
.br
.ti -1c
.RI "void \fBchildDoSaveSettings\fP ()"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBackend\fP (QObject *parent=0)"
.br
.RI "\fI\fBBackend::Backend\fP\&. \fP"
.ti -1c
.RI "\fB~Backend\fP ()"
.br
.RI "\fI\fBBackend::~Backend\fP\&. \fP"
.ti -1c
.RI "void \fBaddInstance\fP (\fBIInstance\fP *, bool=true)"
.br
.RI "\fIBackend::addChild\&. \fP"
.ti -1c
.RI "void \fBcreateChild\fP ()"
.br
.ti -1c
.RI "void \fBchildExited\fP (\fBIInstance\fP *, QString)"
.br
.RI "\fI\fBBackend::childExited\fP\&. \fP"
.ti -1c
.RI "bool \fBisLast\fP ()"
.br
.RI "\fI\fBBackend::isLast\fP\&. \fP"
.ti -1c
.RI "bool \fBremoveInstance\fP (\fBIInstance\fP *, bool=true)"
.br
.RI "\fIBackend::removeChild\&. \fP"
.ti -1c
.RI "bool \fBremoveInstance\fP (int, bool=true)"
.br
.ti -1c
.RI "void \fBremoveSettings\fP (\fBIInstance\fP *)"
.br
.RI "\fI\fBBackend::removeSettings\fP\&. \fP"
.ti -1c
.RI "void \fBremoveSettings\fP (int)"
.br
.ti -1c
.RI "void \fBsaveAllSettings\fP ()"
.br
.ti -1c
.RI "void \fBsaveSettings\fP (\fBIInstance\fP *, QString)"
.br
.ti -1c
.RI "QHash< QString, QVariant > \fBgetSettings\fP (\fBIInstance\fP *)"
.br
.RI "\fI\fBBackend::getSettings\fP\&. \fP"
.ti -1c
.RI "QHash< QString, QVariant > \fBgetSettings\fP (int id)"
.br
.RI "\fI\fBBackend::getSettings\fP\&. \fP"
.ti -1c
.RI "int \fBnextID\fP ()"
.br
.RI "\fI\fBBackend::nextID\fP\&. \fP"
.ti -1c
.RI "QList< int > \fBloadIds\fP ()"
.br
.RI "\fI\fBBackend::loadIds\fP\&. \fP"
.ti -1c
.RI "QVariant \fBgetSetting\fP (QString key, QVariant defaultValue=QVariant())"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static QDir \fBdirectoryOf\fP (const QString &)"
.br
.RI "\fI\fBBackend::directoryOf\fP\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The \fBBackend\fP class\&. 

The heart and soul of the eidtors functionality\&. Is connected to all the other parts of the application (through SIGNALs as well as references) and keeps track of all the windows and code evaluation threads that are created and deleted\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Backend::Backend (QObject *parent = \fC0\fP)\fC [explicit]\fP"

.PP
\fBBackend::Backend\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP The constructor of the \fBBackend\fP class\&. Initializes the editor window list and the thread list as well as the settings backend\&. 
.RE
.PP

.PP
References SettingsBackend::getSettingsFor()\&.
.SS "Backend::~Backend ()"

.PP
\fBBackend::~Backend\fP\&. The destructor of the \fBBackend\fP class\&. Eliminates all the threads that were orphaned when all the windows closed\&. 
.SH "Member Function Documentation"
.PP 
.SS "void Backend::addInstance (\fBIInstance\fP *instance, boolremoveSettings = \fCtrue\fP)"

.PP
Backend::addChild\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinstance\fP 
.br
\fIremoveSettings\fP Is called by one of the editor window instances; enlists the child and creates an empty thread entry in the list so that the two correlate\&. 
.RE
.PP

.PP
References childSaidCloseAll(), getSettings(), instanceChangedSetting(), instanceChangedSettings(), instanceClosing(), instanceDestroyed(), instanceRequestSetting(), instanceRequestSettings(), instanceRunCode(), instanceStopCode(), openHelp(), SettingsBackend::removeSettings(), and settingsWindowRequested()\&.
.PP
Referenced by BootLoader::acceptConnection()\&.
.SS "void Backend::childExited (\fBIInstance\fP *child, QStringfile)"

.PP
\fBBackend::childExited\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIchild\fP 
.br
\fIfile\fP Is called by one of the editor window instances; when the child reacts to the closedAction, it is removed from the list\&. 
.RE
.PP

.SS "void Backend::childSaidCloseAll ()\fC [slot]\fP"

.PP
\fBBackend::childSaidCloseAll\fP\&. Is called by one of the editor window instances; when a user requests to exit the application, this will tell all the children to terminate\&. 
.PP
References instanceDestroyed(), removeInstance(), and SettingsBackend::removeSettings()\&.
.PP
Referenced by addInstance()\&.
.SS "QDir Backend::directoryOf (const QString &subdir)\fC [static]\fP"

.PP
\fBBackend::directoryOf\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsubdir\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the directory one wants to navigate into
.RE
.PP
Platform independent wrapper to changing the directory\&. 
.PP
Referenced by openHelp()\&.
.SS "void Backend::getExecutionResults (\fBQtSoundThread\fP *thread, QStringreturnedException)\fC [slot]\fP"

.PP
\fBBackend::getExecutionResults\fP\&. reacts to the done SIGNAL by terminating the thread and Q_EMITting a showResults SIGNAL for the QWidgets to display 
.SS "QHash< QString, QVariant > Backend::getSettings (\fBIInstance\fP *instance)"

.PP
\fBBackend::getSettings\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinstance\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
a list of current settings
.RE
.PP
Gets all settings for a specific window\&. 
.PP
Referenced by addInstance()\&.
.SS "QHash< QString, QVariant > Backend::getSettings (intid)"

.PP
\fBBackend::getSettings\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
a QHash of all the settings for an id\&.
.RE
.PP
looks up the settings for an editor window child\&. 
.PP
References SettingsBackend::getSettings()\&.
.SS "void Backend::instanceChangedSetting (\fBIInstance\fP *instance, const QString &key, const QVariant &value)\fC [slot]\fP"

.PP
\fBBackend::instanceChangedSetting\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinstance\fP 
.br
\fIkey\fP 
.br
\fIvalue\fP Reacts to the instance changing settings\&. Saves the new settings\&. 
.RE
.PP

.PP
References SettingsBackend::saveSettingsFor()\&.
.PP
Referenced by addInstance()\&.
.SS "void Backend::instanceChangedSettings (\fBIInstance\fP *instance, const QHash< QString, QVariant > &set)\fC [slot]\fP"

.PP
\fBBackend::instanceChangedSettings\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinstance\fP 
.br
\fIset\fP Reacts to the instance changing its settings(as a set)\&. Saves the new settings\&. TODO: Needed(overloaded call)? 
.RE
.PP

.PP
References SettingsBackend::saveSettingsFor()\&.
.PP
Referenced by addInstance()\&.
.SS "void Backend::instanceClosing (\fBIInstance\fP *instance)\fC [slot]\fP"

.PP
\fBBackend::instanceClosing\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinstance\fP Reacts to the closing signal and calls the \fBremoveInstance()\fP routine\&. TODO: Needed? 
.RE
.PP

.PP
References removeInstance()\&.
.PP
Referenced by addInstance()\&.
.SS "void Backend::instanceDestroyed (QObject *instance)\fC [slot]\fP"

.PP
\fBBackend::instanceDestroyed\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinstance\fP Reacts to the destroyed signal and removes the instance from the backends' memory\&. 
.RE
.PP

.PP
References removeInstance()\&.
.PP
Referenced by addInstance(), and childSaidCloseAll()\&.
.SS "void Backend::instanceRequestSetting (\fBIInstance\fP *instance, const QString &key, QVariant &value)\fC [slot]\fP"

.PP
\fBBackend::instanceRequestSetting\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinstance\fP 
.br
\fIkey\fP 
.br
\fIvalue\fP Reacts to the instance requesting its settings for a given key\&. 
.RE
.PP

.PP
References SettingsBackend::getSettingsFor()\&.
.PP
Referenced by addInstance()\&.
.SS "void Backend::instanceRequestSettings (\fBIInstance\fP *instance, QHash< QString, QVariant > &set)\fC [slot]\fP"

.PP
\fBBackend::instanceRequestSettings\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinstance\fP 
.br
\fIset\fP TODO: Needed(overloaded call)? 
.RE
.PP

.PP
References SettingsBackend::getSettings()\&.
.PP
Referenced by addInstance()\&.
.SS "void Backend::instanceRunCode (\fBIInstance\fP *instance)\fC [slot]\fP"

.PP
\fBBackend::instanceRunCode\fP\&. reacts to the run SIGNAL by running the code(duh) that is in the editor at the moment\&. 
.PP
References SettingsBackend::getSettingsFor()\&.
.PP
Referenced by addInstance()\&.
.SS "void Backend::instanceStopCode (\fBIInstance\fP *instance)\fC [slot]\fP"

.PP
\fBBackend::instanceStopCode\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinstance\fP Reacts to the stopCode signal of an instance\&. Stops the executing context\&. 
.RE
.PP

.PP
Referenced by addInstance()\&.
.SS "bool Backend::isLast ()"

.PP
\fBBackend::isLast\fP\&. 
.PP
\fBReturns:\fP
.RS 4
true if the child is the last one, false otherwise
.RE
.PP
checks whether there is only one or no child in the list\&. 
.SS "QList< int > Backend::loadIds ()"

.PP
\fBBackend::loadIds\fP\&. 
.PP
\fBReturns:\fP
.RS 4
A list of used IDs
.RE
.PP
Return the list of ids for which settings should exist\&. 
.PP
References SettingsBackend::getSettingsFor()\&.
.SS "int Backend::nextID ()"

.PP
\fBBackend::nextID\fP\&. 
.PP
\fBReturns:\fP
.RS 4
Free to use id
.RE
.PP
Look up the first free ID for a new Instance\&. 
.PP
Referenced by BootLoader::acceptConnection()\&.
.SS "void Backend::openHelp (\fBIInstance\fP *)\fC [slot]\fP"

.PP
\fBBackend::openHelp\fP\&. Opens a help window in HTML\&. 
.PP
References directoryOf()\&.
.PP
Referenced by addInstance()\&.
.SS "bool Backend::removeInstance (\fBInstances::IInstance\fP *instance, boolremoveSettings = \fCtrue\fP)"

.PP
Backend::removeChild\&. 
.PP
\fBParameters:\fP
.RS 4
\fIchild\fP Is called by one of the editor window instances; removes the child from the list and closes the thread\&. Removes all the settings that belong to the current child\&. BUG: When the settings of the next children are updated, the settings window will display the settings of the killed child\&. This will result in confusion of the user\&. TODO: Fix bug! 
.RE
.PP

.PP
Referenced by childSaidCloseAll(), instanceClosing(), and instanceDestroyed()\&.
.SS "void Backend::removeSettings (\fBIInstance\fP *instance)"

.PP
\fBBackend::removeSettings\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinstance\fP removes the settings for a specific file\&. 
.RE
.PP

.PP
References SettingsBackend::removeSettings()\&.
.SS "void Backend::settingsWindowRequested (\fBIInstance\fP *instance)\fC [slot]\fP"

.PP
\fBBackend::settingsWindowRequested\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinstance\fP Creates a settings window instance\&. 
.RE
.PP

.PP
Referenced by addInstance()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for VetoLC from the source code\&.
